
{
  "title": "ISRO Scientist/Engineer CS - 2007",
  "questions": [
    {
      "chapter": "Digital Logic",
      "question": "The Boolean expression Y = (A + B' + A'B)C' is given by",
      "options": ["AC'", "BC'", "C'", "AB'"],
      "answer": "C'",
      "explanation": "Using Boolean algebra simplification: Y = (A + A'B + B')C' = ( (A+A') (A+B) + B' )C' = (A+B+B')C' = (A+1)C' = (1)C' = C'."
    },
    {
      "chapter": "Digital Logic",
      "question": "The circuit shown in the following Figure realizes the function",
      "image": "[IMAGE_HERE]",
      "options": ["(A+B+C)(D'+E')", "(A+B+C)(D'E')", "(A+B+C)'(D'E')", "(A+B+C)(D'E')'"],
      "answer": "(A+B+C)(D'+E')",
      "explanation": "The top part of the circuit is a 3-input NOR gate followed by a NOT gate, which is equivalent to an OR gate: (A+B+C). The bottom part is a 2-input NOR gate followed by a NOT gate, equivalent to an OR gate: (D+E). The final gate is a NOR. The expression is NOT((A+B+C) OR (D+E)) which by De Morgan's law is (A+B+C)' AND (D+E)'. This doesn't match the options. Re-evaluating the circuit diagram: The first level gates are NORs. Output 1 is (A+B+C)'. Output 2 is (D+E)'. The final gate is a NOR gate taking these as inputs: ((A+B+C)' + (D+E)')'. Applying De Morgan's law: ((A+B+C)'') AND ((D+E)'') = (A+B+C) AND (D+E). Let's re-check the OCR image... Ah, the final gate is also a NOR gate. It seems there is a misunderstanding in the provided solution text. The final output is ((A+B+C)' + (D+E)')' = (A+B+C) AND (D+E). Assuming the option text is a typo and should be AND. Let's trust the provided answer key: 'a'. This implies the diagram is misinterpreted in the question text. Let's assume the question meant a different configuration."
    },
    {
      "chapter": "Digital Logic",
      "question": "The circuit shown in the given Figure is a",
      "image": "[IMAGE_HERE]",
      "options": ["full adder", "full subtractor", "shift register", "decade counter"],
      "answer": "full subtractor",
      "explanation": "The circuit diagram implements the logic of a full subtractor. It takes three inputs (minuend A, subtrahend B, and borrow-in C) and produces two outputs (Difference and Borrow-out)."
    },
    {
      "chapter": "Digital Logic",
      "question": "When two numbers are added in excess-3 code and the sum is less than 9, then in order to get the correct answer it is necessary to",
      "options": ["subtract 0011 from the sum", "add 0011 to the sum", "subtract 0110 from the sum", "add 0110 to the sum"],
      "answer": "subtract 0011 from the sum",
      "explanation": "In Excess-3 arithmetic, if the sum of two digits is less than 9, there is no carry and the result is non-BCD. To correct it, you subtract 3 (binary 0011)."
    }
  ]
}
