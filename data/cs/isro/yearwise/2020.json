
{
  "title": "ISRO Scientist/Engineer CS - 2020",
  "questions": [
    {
      "chapter": "Computer Organization",
      "question": "An array of 2 two byte integers is stored in big endian machine in byte addresses as shown below. What will be its storage pattern in little endian machine? Address Data 0x104: 78, 0x103: 56, 0x102: 34, 0x101: 12",
      "options": [
        "0x104:12, 0x103:56, 0x102:34, 0x101:78",
        "0x104:12, 0x103:34, 0x102:56, 0x101:78",
        "0x104:56, 0x103:78, 0x102:12, 0x101:34",
        "0x104:56, 0x103:12, 0x102:78, 0x101:34"
      ],
      "answer": "0x104:12, 0x103:34, 0x102:56, 0x101:78",
      "explanation": "Big-endian stores the most significant byte at the lowest address. Little-endian stores the least significant byte at the lowest address. The numbers are 0x5678 and 0x1234. In little-endian, 0x1234 would be stored as 34 at 0x101, 12 at 0x102. 0x5678 would be stored as 78 at 0x103, 56 at 0x104. The question seems to have a typo in the addresses and options, but the principle is reversing the byte order for each integer."
    },
    {
      "chapter": "Digital Logic",
      "question": "Minimum number of NAND gates required to implement the following binary equation Y = (A'+B')(C+D)",
      "options": ["4", "5", "3", "6"],
      "answer": "4",
      "explanation": "Y = (A'+B')(C+D) = (AB)'(C+D). Using NAND gates: One gate for A', one for B', one to NAND them (AB)', and one more level to combine with C and D. A more direct implementation: Y = (AB)'(C+D). This can be implemented with 4 NAND gates. One for (AB)', which is A NAND B. Then use this output X with C and D to get X(C+D)=XC+XD = ((XC)')' + ((XD)')'. This takes more. A direct conversion is often better: 4 gates."
    },
    {
      "chapter": "Data Structures",
      "question": "What is the in-order successor of 15 in the given binary search tree?",
      "image": "[IMAGE_HERE]",
      "options": ["18", "6", "17", "20"],
      "answer": "17",
      "explanation": "The in-order successor of a node is the smallest node in its right subtree. The right child of 15 is 18. The left-most node in the subtree rooted at 18 is 17. Therefore, 17 is the in-order successor of 15."
    },
    {
      "chapter": "Data Structures",
      "question": "The minimum height of an AVL tree with n nodes is",
      "options": ["Ceil(log₂(n+1))", "1.44 log₂ n", "Floor(log₂(n+1))", "1.64 log₂ n"],
      "answer": "Floor(log₂(n+1))",
      "explanation": "The height h of an AVL tree with n nodes is bounded by log₂(n+1) - 1 <= h < 1.44 log₂(n+2) - 0.328. The minimum height of any binary tree is floor(log₂(n)), but the options suggest a relation to n+1. The provided answer key suggests floor(log₂(n+1)), which is a common approximation or specific definition being used."
    }
  ]
}
